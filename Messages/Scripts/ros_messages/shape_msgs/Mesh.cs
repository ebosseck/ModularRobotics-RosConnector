// generated by RosbridgeMessageGenerator
// generated on 27 May 2025, 04:17:01

using System;
using System.Collections.Generic;

using Riptide;
using Visus.Robotics.RosBridge;

using ros_messages.geometry_msgs;
using ros_messages.shape_msgs;

namespace ros_messages.shape_msgs
{
    public class MeshMsg : ROSMessage
    {

        

        #region Registration

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void _registerMessage () {
            ROSMessageFactory.registerMessage(_ROS_MESSAGE_ID, delegate(Message msg)
            {
                return new MeshMsg(msg);
            });
        }

        #endregion

        public List<MeshTriangleMsg> triangles;
        public List<PointMsg> vertices;

        public const string _ROS_MESSAGE_ID = "shape_msgs/Mesh";

        public MeshMsg(List<MeshTriangleMsg> triangles = null, List<PointMsg> vertices = null) : base()
        {
            this.triangles = triangles;
            this.vertices = vertices;
        }

        public MeshMsg(Message message) : base()
        {
            this.deserializeFromMessage(message);
        }


        #region Serialization

        public override void serializeToMessage(Message message, bool includeHeader = true)
        {
            if (includeHeader) {
                message.AddString(_ROS_MESSAGE_ID);
            }
            AddArrayLength(message, this.triangles.Count);
            for (int i = 0; i < this.triangles.Count; i++) {
                this.triangles[i].serializeToMessage(message, includeHeader: false);
            }
            AddArrayLength(message, this.vertices.Count);
            for (int i = 0; i < this.vertices.Count; i++) {
                this.vertices[i].serializeToMessage(message, includeHeader: false);
            }
        }

        public override void deserializeFromMessage(Message message)
        {
            ushort length = ReadArrayLength(message);
            this.triangles = new List<MeshTriangleMsg>();
            for (int i = 0; i < length; i++) {
                MeshTriangleMsg value = new MeshTriangleMsg();
                value.deserializeFromMessage(message);
                this.triangles.Add(value);
            }
            length = ReadArrayLength(message);
            this.vertices = new List<PointMsg>();
            for (int i = 0; i < length; i++) {
                PointMsg value = new PointMsg();
                value.deserializeFromMessage(message);
                this.vertices.Add(value);
            }
        }

        #endregion
    }
}
