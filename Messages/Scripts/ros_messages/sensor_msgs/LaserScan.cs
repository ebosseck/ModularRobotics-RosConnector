// generated by RosbridgeMessageGenerator
// generated on 22 May 2025, 00:29:59

using System;
using System.Collections.Generic;

using Riptide;
using Visus.Robotics.RosBridge;

using ros_messages.std_msgs;

namespace ros_messages.sensor_msgs
{
    public class LaserScanMsg : ROSMessage
    {

        

        #region Registration

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void _registerMessage () {
            ROSMessageFactory.registerMessage(_ROS_MESSAGE_ID, delegate(Message msg)
            {
                return new LaserScanMsg(msg);
            });
        }

        #endregion

        public HeaderMsg header;
        public float angle_min;
        public float angle_max;
        public float angle_increment;
        public float time_increment;
        public float scan_time;
        public float range_min;
        public float range_max;
        public List<float> ranges;
        public List<float> intensities;

        public const string _ROS_MESSAGE_ID = "sensor_msgs/LaserScan";

        public LaserScanMsg(HeaderMsg header = null, float angle_min = 0f, float angle_max = 0f, float angle_increment = 0f, float time_increment = 0f, float scan_time = 0f, float range_min = 0f, float range_max = 0f, List<float> ranges = null, List<float> intensities = null) : base()
        {
            this.header = header;
            this.angle_min = angle_min;
            this.angle_max = angle_max;
            this.angle_increment = angle_increment;
            this.time_increment = time_increment;
            this.scan_time = scan_time;
            this.range_min = range_min;
            this.range_max = range_max;
            this.ranges = ranges;
            this.intensities = intensities;
        }

        public LaserScanMsg(Message message) : base()
        {
            this.deserializeFromMessage(message);
        }


        #region Serialization

        public override void serializeToMessage(Message message, bool includeHeader = true)
        {
            if (includeHeader) {
                message.AddString(_ROS_MESSAGE_ID);
            }
            this.header.serializeToMessage(message, includeHeader: false);
            message.AddFloat(this.angle_min);
            message.AddFloat(this.angle_max);
            message.AddFloat(this.angle_increment);
            message.AddFloat(this.time_increment);
            message.AddFloat(this.scan_time);
            message.AddFloat(this.range_min);
            message.AddFloat(this.range_max);
            message.AddFloats(this.ranges.ToArray());
            message.AddFloats(this.intensities.ToArray());
        }

        public override void deserializeFromMessage(Message message)
        {
            this.header = new HeaderMsg();
            this.header.deserializeFromMessage(message);
            this.angle_min = message.GetFloat();
            this.angle_max = message.GetFloat();
            this.angle_increment = message.GetFloat();
            this.time_increment = message.GetFloat();
            this.scan_time = message.GetFloat();
            this.range_min = message.GetFloat();
            this.range_max = message.GetFloat();
            this.ranges = new List<float>(message.GetFloats());
            this.intensities = new List<float>(message.GetFloats());
        }

        #endregion
    }
}
