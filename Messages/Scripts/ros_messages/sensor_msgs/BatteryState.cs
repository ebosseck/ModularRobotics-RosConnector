// generated by RosbridgeMessageGenerator
// generated on 22 May 2025, 00:29:59

using System;
using System.Collections.Generic;

using Riptide;
using Visus.Robotics.RosBridge;

using ros_messages.std_msgs;

namespace ros_messages.sensor_msgs
{
    public class BatteryStateMsg : ROSMessage
    {

        public const byte POWER_SUPPLY_STATUS_UNKNOWN = 0;
        public const byte POWER_SUPPLY_STATUS_CHARGING = 1;
        public const byte POWER_SUPPLY_STATUS_DISCHARGING = 2;
        public const byte POWER_SUPPLY_STATUS_NOT_CHARGING = 3;
        public const byte POWER_SUPPLY_STATUS_FULL = 4;
        public const byte POWER_SUPPLY_HEALTH_UNKNOWN = 0;
        public const byte POWER_SUPPLY_HEALTH_GOOD = 1;
        public const byte POWER_SUPPLY_HEALTH_OVERHEAT = 2;
        public const byte POWER_SUPPLY_HEALTH_DEAD = 3;
        public const byte POWER_SUPPLY_HEALTH_OVERVOLTAGE = 4;
        public const byte POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5;
        public const byte POWER_SUPPLY_HEALTH_COLD = 6;
        public const byte POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7;
        public const byte POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE = 8;
        public const byte POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0;
        public const byte POWER_SUPPLY_TECHNOLOGY_NIMH = 1;
        public const byte POWER_SUPPLY_TECHNOLOGY_LION = 2;
        public const byte POWER_SUPPLY_TECHNOLOGY_LIPO = 3;
        public const byte POWER_SUPPLY_TECHNOLOGY_LIFE = 4;
        public const byte POWER_SUPPLY_TECHNOLOGY_NICD = 5;
        public const byte POWER_SUPPLY_TECHNOLOGY_LIMN = 6;

        #region Registration

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void _registerMessage () {
            ROSMessageFactory.registerMessage(_ROS_MESSAGE_ID, delegate(Message msg)
            {
                return new BatteryStateMsg(msg);
            });
        }

        #endregion

        public HeaderMsg header;
        public float voltage;
        public float temperature;
        public float current;
        public float charge;
        public float capacity;
        public float design_capacity;
        public float percentage;
        public byte power_supply_status;
        public byte power_supply_health;
        public byte power_supply_technology;
        public bool present;
        public List<float> cell_voltage;
        public List<float> cell_temperature;
        public string location;
        public string serial_number;

        public const string _ROS_MESSAGE_ID = "sensor_msgs/BatteryState";

        public BatteryStateMsg(HeaderMsg header = null, float voltage = 0f, float temperature = 0f, float current = 0f, float charge = 0f, float capacity = 0f, float design_capacity = 0f, float percentage = 0f, byte power_supply_status = 0, byte power_supply_health = 0, byte power_supply_technology = 0, bool present = false, List<float> cell_voltage = null, List<float> cell_temperature = null, string location = "", string serial_number = "") : base()
        {
            this.header = header;
            this.voltage = voltage;
            this.temperature = temperature;
            this.current = current;
            this.charge = charge;
            this.capacity = capacity;
            this.design_capacity = design_capacity;
            this.percentage = percentage;
            this.power_supply_status = power_supply_status;
            this.power_supply_health = power_supply_health;
            this.power_supply_technology = power_supply_technology;
            this.present = present;
            this.cell_voltage = cell_voltage;
            this.cell_temperature = cell_temperature;
            this.location = location;
            this.serial_number = serial_number;
        }

        public BatteryStateMsg(Message message) : base()
        {
            this.deserializeFromMessage(message);
        }


        #region Serialization

        public override void serializeToMessage(Message message, bool includeHeader = true)
        {
            if (includeHeader) {
                message.AddString(_ROS_MESSAGE_ID);
            }
            this.header.serializeToMessage(message, includeHeader: false);
            message.AddFloat(this.voltage);
            message.AddFloat(this.temperature);
            message.AddFloat(this.current);
            message.AddFloat(this.charge);
            message.AddFloat(this.capacity);
            message.AddFloat(this.design_capacity);
            message.AddFloat(this.percentage);
            message.AddByte(this.power_supply_status);
            message.AddByte(this.power_supply_health);
            message.AddByte(this.power_supply_technology);
            message.AddBool(this.present);
            message.AddFloats(this.cell_voltage.ToArray());
            message.AddFloats(this.cell_temperature.ToArray());
            message.AddString(this.location);
            message.AddString(this.serial_number);
        }

        public override void deserializeFromMessage(Message message)
        {
            this.header = new HeaderMsg();
            this.header.deserializeFromMessage(message);
            this.voltage = message.GetFloat();
            this.temperature = message.GetFloat();
            this.current = message.GetFloat();
            this.charge = message.GetFloat();
            this.capacity = message.GetFloat();
            this.design_capacity = message.GetFloat();
            this.percentage = message.GetFloat();
            this.power_supply_status = message.GetByte();
            this.power_supply_health = message.GetByte();
            this.power_supply_technology = message.GetByte();
            this.present = message.GetBool();
            this.cell_voltage = new List<float>(message.GetFloats());
            this.cell_temperature = new List<float>(message.GetFloats());
            this.location = message.GetString();
            this.serial_number = message.GetString();
        }

        #endregion
    }
}
