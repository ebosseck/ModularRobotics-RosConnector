// generated by RosbridgeMessageGenerator
// generated on 22 May 2025, 00:29:59

using System;
using System.Collections.Generic;

using Riptide;
using Visus.Robotics.RosBridge;

using ros_messages.std_msgs;

namespace ros_messages.sensor_msgs
{
    public class RangeMsg : ROSMessage
    {

        public const byte ULTRASOUND = 0;
        public const byte INFRARED = 1;

        #region Registration

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void _registerMessage () {
            ROSMessageFactory.registerMessage(_ROS_MESSAGE_ID, delegate(Message msg)
            {
                return new RangeMsg(msg);
            });
        }

        #endregion

        public HeaderMsg header;
        public byte radiation_type;
        public float field_of_view;
        public float min_range;
        public float max_range;
        public float range;

        public const string _ROS_MESSAGE_ID = "sensor_msgs/Range";

        public RangeMsg(HeaderMsg header = null, byte radiation_type = 0, float field_of_view = 0f, float min_range = 0f, float max_range = 0f, float range = 0f) : base()
        {
            this.header = header;
            this.radiation_type = radiation_type;
            this.field_of_view = field_of_view;
            this.min_range = min_range;
            this.max_range = max_range;
            this.range = range;
        }

        public RangeMsg(Message message) : base()
        {
            this.deserializeFromMessage(message);
        }


        #region Serialization

        public override void serializeToMessage(Message message, bool includeHeader = true)
        {
            if (includeHeader) {
                message.AddString(_ROS_MESSAGE_ID);
            }
            this.header.serializeToMessage(message, includeHeader: false);
            message.AddByte(this.radiation_type);
            message.AddFloat(this.field_of_view);
            message.AddFloat(this.min_range);
            message.AddFloat(this.max_range);
            message.AddFloat(this.range);
        }

        public override void deserializeFromMessage(Message message)
        {
            this.header = new HeaderMsg();
            this.header.deserializeFromMessage(message);
            this.radiation_type = message.GetByte();
            this.field_of_view = message.GetFloat();
            this.min_range = message.GetFloat();
            this.max_range = message.GetFloat();
            this.range = message.GetFloat();
        }

        #endregion
    }
}
