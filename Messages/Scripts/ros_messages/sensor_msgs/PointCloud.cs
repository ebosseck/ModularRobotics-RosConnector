// generated by RosbridgeMessageGenerator
// generated on 22 May 2025, 00:29:59

using System;
using System.Collections.Generic;

using Riptide;
using Visus.Robotics.RosBridge;

using ros_messages.geometry_msgs;
using ros_messages.sensor_msgs;
using ros_messages.std_msgs;

namespace ros_messages.sensor_msgs
{
    public class PointCloudMsg : ROSMessage
    {

        

        #region Registration

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void _registerMessage () {
            ROSMessageFactory.registerMessage(_ROS_MESSAGE_ID, delegate(Message msg)
            {
                return new PointCloudMsg(msg);
            });
        }

        #endregion

        public HeaderMsg header;
        public List<Point32Msg> points;
        public List<ChannelFloat32Msg> channels;

        public const string _ROS_MESSAGE_ID = "sensor_msgs/PointCloud";

        public PointCloudMsg(HeaderMsg header = null, List<Point32Msg> points = null, List<ChannelFloat32Msg> channels = null) : base()
        {
            this.header = header;
            this.points = points;
            this.channels = channels;
        }

        public PointCloudMsg(Message message) : base()
        {
            this.deserializeFromMessage(message);
        }


        #region Serialization

        public override void serializeToMessage(Message message, bool includeHeader = true)
        {
            if (includeHeader) {
                message.AddString(_ROS_MESSAGE_ID);
            }
            this.header.serializeToMessage(message, includeHeader: false);
            message.AddInt(this.points.Count);
            for (int i = 0; i < this.points.Count; i++) {
                this.points[i].serializeToMessage(message, includeHeader: false);
            }
            message.AddInt(this.channels.Count);
            for (int i = 0; i < this.channels.Count; i++) {
                this.channels[i].serializeToMessage(message, includeHeader: false);
            }
        }

        public override void deserializeFromMessage(Message message)
        {
            this.header = new HeaderMsg();
            this.header.deserializeFromMessage(message);
            int length = message.GetInt();
            this.points = new List<Point32Msg>();
            for (int i = 0; i < length; i++) {
                Point32Msg value = new Point32Msg();
                value.deserializeFromMessage(message);
                this.points.Add(value);
            }
            length = message.GetInt();
            this.channels = new List<ChannelFloat32Msg>();
            for (int i = 0; i < length; i++) {
                ChannelFloat32Msg value = new ChannelFloat32Msg();
                value.deserializeFromMessage(message);
                this.channels.Add(value);
            }
        }

        #endregion
    }
}
